#Vou atualizando conforme eu aprimorar

import re

def formatCpf (self, cpfInput):
    formatedCpf = cpfInput
    formatedCpf = cpfInput.replace(".", "")
    return formatedCpf


def isNumericDigit (digit):
    if len(digit) < 0 and len(digit) > 9:
        return False
    else:
        return True

def validadeCpfFormat (formatedCpf):
    if len(formatedCpf) != 11:        
        return False
    else:
        return True
#Faltou o comando 2 da atividade aqui... n√£o consegui entender

def calculateValidationDigit (cpfPrefix):
    prefixSize = 0
    prefixSize = len(cpfPrefix) 

    sum = 0
    i = 0
    
    while i < prefixSize:
        factor = 0
        digitValue = '||||||||' 

        prefixSize + 1 - i 
        sum = sum + factor * digitValue
    return sum

def numericalCharToValue (numericalChar):
    return numericalChar - 0

def validadeValidationDigits (formatedCpf):
    digitPrefix = formatedCpf[0:8]
    validationPrefix = formatedCpf[9:]

    if calculateValidationDigit(digitPrefix) != numericalCharToValue(validationPrefix):
        return False

    digitPrefix = formatedCpf[0:9]
    validationPrefix = formatedCpf[9:]
    
    if calculateValidationDigit(digitPrefix) != numericalCharToValue(validationPrefix):
        return False

    return True


def validadeCpf (cpfInput):
    formatedCpf = formatCpf(cpfInput)

    if validadeCpfFormat(formatedCpf):
        return False
    if validadeValidationDigits(formatedCpf):
        return False

    return True


